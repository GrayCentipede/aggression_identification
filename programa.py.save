import csv
from sklearn.metrics import classification_report
from sklearn.pipeline import Pipeline
from sklearn.linear_model import SGDClassifier
from sklearn.kernel_approximation import RBFSampler
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics import f1_score
from sklearn.model_selection import GridSearchCV
from sklearn.svm import SVC
from sklearn.linear_model import PassiveAggressiveClassifier

test_file = "data/agr_en_fb_test.csv"

f = open("data/agr_en_train.csv")
stream_train = csv.DictReader(f, fieldnames=('title', 'body','topic'))
X_train, y_train = zip(*[(x['body'], x['topic']) for x in stream_train])

f = open("data/agr_en_dev.csv")
stream_train = csv.DictReader(f, fieldnames=('title', 'body','topic'))
X_dev, y_dev = zip(*[(x['body'], x['topic']) for x in stream_train])

f = open(test_file)
stream_train = csv.DictReader(f, fieldnames=('title', 'body'))
test_titles, X_test = zip(*[(x['title'], x['body'])  for x in stream_train])

text_clf = Pipeline([('tfidf', TfidfVectorizer(binary=True, analyzer='char', ngram_range=(1, 5)) ),
		     ('gauss', RBFSampler(random_state=1) ),
                    ('clf', SGDClassifier(loss='hinge', alpha=1e-3, random_state=42,
                    				 n_jobs=-1) )
    ])

parameters = [{'tfidf__ngram_range': [(1, 1), (1, 2), (1,5), (1,4), (2, 4), (2, 5)],
                'tfidf__sublinear_tf': (True, False),
                'tfidf__stop_words': (None, 'english'),
                'tfidf__lowercase': (True, False),
                'tfidf__analyzer': ('word', 'char'),
                'tfidf__binary': (True, False),
		        'gauss': [RBFSampler(random_state=1), None],
	                'gauss__gamma': (1.0, 0.1, 0.001, 0.0001, 0.00001),
		        #'clf': [SGDClassifier(loss='hinge', alpha=1e-3, random_state=42, n_jobs=-1)],
                'clf': [LogisticRegression()],
                    'clf__C': (0.001, 0.01, 1.0, 10.0, 50.0, 100.0, 200.0, 300.0, 500.0, 1000.0),
                    'clf__penalty': ('l1', 'l2')
            },
           {'tfidf__ngram_range': [(1, 1), (1, 2), (1,5), (1,4), (2, 4), (2, 5)],
                'tfidf__sublinear_tf': (True, False),
                'tfidf__stop_words': (None, 'english'),
                'tfidf__lowercase': (True, False),
                'tfidf__analyzer': ('word', 'char'),
                'tfidf__binary': (True, False),
                'clf': [PassiveAggressiveClassifier()],
                'clf__C': (1.0, 5.0, 10.0, 50.0, 100.0, 200.0, 300.0, 500.0, 1000.0),
                'clf__kernel': ('rbf', 'poly', 'linear')

            }
]


#text_clf.fit(X_train, y_train)
gs_clf = GridSearchCV(text_clf, parameters, n_jobs=-1)
#predicted = text_clf.predict(X_dev)
gs_clf = gs_clf.fit(X_train, y_train)
predicted = gs_clf.predict(X_dev)
#print(gs_clf.cv_results_)
# imprimir evaluacion de predicciones con el conjunto dev
print(f1_score(y_dev, predicted, average='weighted'))
print(classification_report(y_dev, predicted))

#predicted = text_clf.predict(X_test)
predicted = gs_clf.predict(X_test)
# imprimir prediccinoes con el conjunto test (competencia)
for id, l in zip(test_titles, predicted):
    print("%s,%s" % (id, l))
#metodo_para_imprimir_predicciones(predicted)
